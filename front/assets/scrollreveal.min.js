// Definir la configuración de ScrollReveal\
import ScrollReveal from 'scrollreveal';

var ScrollReveal = function() {
    "use strict";

    // Configuración por defecto
    var r = {
        delay: 0,
        distance: "0",
        duration: 600,
        easing: "cubic-bezier(0.5, 0, 0, 1)",
        interval: 0,
        opacity: 0,
        origin: "bottom",
        rotate: { x: 0, y: 0, z: 0 },
        scale: 1,
        cleanup: false,
        container: document.documentElement,
        desktop: true,
        mobile: true,
        reset: false,
        useDelay: "always",
        viewFactor: 0,
        viewOffset: { top: 0, right: 0, bottom: 0, left: 0 },
        afterReset: function() {},
        afterReveal: function() {},
        beforeReset: function() {},
        beforeReveal: function() {}
    };

    var n = {
        success: function() {
            document.documentElement.classList.add("sr");
            document.body ? document.body.style.height = "100%" : document.addEventListener("DOMContentLoaded", function() {
                document.body.style.height = "100%";
            });
        },
        failure: function() {
            return document.documentElement.classList.remove("sr"), {
                clean: function() {},
                destroy: function() {},
                reveal: function() {},
                sync: function() {},
                get noop() { return true; }
            };
        }
    };

    // Funciones auxiliares
    function o(e) {
        return "object" == typeof window.Node ? e instanceof window.Node : null !== e && "object" == typeof e && "number" == typeof e.nodeType && "string" == typeof e.nodeName;
    }

    function u(e, t) {
        if (void 0 === t && (t = document), e instanceof Array) return e.filter(o);
        if (o(e)) return [e];
        if (n = e, i = Object.prototype.toString.call(n), "object" == typeof window.NodeList ? n instanceof window.NodeList : null !== n && "object" == typeof n && "number" == typeof n.length && /^\[object (HTMLCollection|NodeList|Object)\]$/.test(i) && (0 === n.length || o(n[0]))) return Array.prototype.slice.call(e);
        var n, i;
        if ("string" == typeof e) try {
            var r = t.querySelectorAll(e);
            return Array.prototype.slice.call(r);
        } catch (e) {
            return [];
        }
        return [];
    }

    function s(e) {
        return null !== e && e instanceof Object && (e.constructor === Object || "[object Object]" === Object.prototype.toString.call(e));
    }

    function f(n, i) {
        if (s(n)) return Object.keys(n).forEach(function(e) { return i(n[e], e, n); });
        if (n instanceof Array) return n.forEach(function(e, t) { return i(e, t, n); });
        throw new TypeError("Expected either an array or object literal.");
    }

    // Función para aplicar la animación a los elementos
    function applyAnimationToElement(element, config) {
        // Aquí es donde configuras cómo quieres que se revele el elemento
        // Ejemplo: agregar clases o aplicar transformaciones CSS
        element.style.transition = `opacity ${config.duration}ms ${config.easing} ${config.delay}ms, transform ${config.duration}ms ${config.easing} ${config.delay}ms`;
        element.style.opacity = 1;
        element.style.transform = `translateY(0) scale(${config.scale})`;
    }

    return {
        reveal: function(selector, config) {
            // Configuración por defecto
            var finalConfig = Object.assign({}, r, config);
            var elements = u(selector);
            
            elements.forEach(function(element) {
                element.style.opacity = finalConfig.opacity;
                element.style.transform = `translateY(${finalConfig.distance})`;
                element.style.transition = `opacity ${finalConfig.duration}ms ${finalConfig.easing} ${finalConfig.delay}ms, transform ${finalConfig.duration}ms ${finalConfig.easing} ${finalConfig.delay}ms`;

                // Al hacer scroll, revisar si el elemento es visible
                window.addEventListener('scroll', function() {
                    var rect = element.getBoundingClientRect();
                    if (rect.top < window.innerHeight && rect.bottom >= 0) {
                        applyAnimationToElement(element, finalConfig);
                    }
                });
            });
        },
        sync: function() {
            // Sincronizar animaciones si es necesario
        }
    };
}();

// Configuración personalizada
ScrollReveal.reveal('.reveal-element', {
    delay: 300,
    distance: '50px',
    duration: 1000,
    easing: 'ease-in-out',
    opacity: 0,
    origin: 'bottom',
    scale: 0.8,
    reset: true
});
